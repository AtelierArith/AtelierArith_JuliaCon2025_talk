[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Let’s read Julia documentation in your preferred language",
    "section": "",
    "text": "This webpage serves as a repository for the presentation materials and links I will be discussing at JuliaCon 2025.\n\nSlide\n\nWe propose a technique for translating Julia documents written in Markdown. The proposed method is primarily intended to assist non-native English speakers."
  },
  {
    "objectID": "index.html#description",
    "href": "index.html#description",
    "title": "Let’s read Julia documentation in your preferred language",
    "section": "",
    "text": "This webpage serves as a repository for the presentation materials and links I will be discussing at JuliaCon 2025.\n\nSlide\n\nWe propose a technique for translating Julia documents written in Markdown. The proposed method is primarily intended to assist non-native English speakers."
  },
  {
    "objectID": "index.html#appendix",
    "href": "index.html#appendix",
    "title": "Let’s read Julia documentation in your preferred language",
    "section": "Appendix",
    "text": "Appendix\n\nThis page is built using Quarto. The qmd files are maintained at this repository. Readers are free to use these materials for educational and research purposes."
  },
  {
    "objectID": "demo/SpecialFunctions.jl/docs/src/index.html",
    "href": "demo/SpecialFunctions.jl/docs/src/index.html",
    "title": "SpecialFunctions.jl",
    "section": "",
    "text": "SpecialFunctions.jl provides a comprehensive collection of special functions based on the OpenSpecFun and OpenLibm libraries.\nSpecial mathematical functions in Julia, include Bessel, Hankel, Airy, error, Dawson, exponential (or sine and cosine) integrals, eta, zeta, digamma, inverse digamma, trigamma, and polygamma functions.\n\n\nThe latest version of the package is available for Julia versions 1.3 and up. To install it, run the following at the Julia REPL:\nimport Pkg; Pkg.add(\"SpecialFunctions\")"
  },
  {
    "objectID": "demo/SpecialFunctions.jl/docs/src/index.html#installation",
    "href": "demo/SpecialFunctions.jl/docs/src/index.html#installation",
    "title": "SpecialFunctions.jl",
    "section": "",
    "text": "The latest version of the package is available for Julia versions 1.3 and up. To install it, run the following at the Julia REPL:\nimport Pkg; Pkg.add(\"SpecialFunctions\")"
  },
  {
    "objectID": "demo/SpecialFunctions.jl/docs/src/functions_overview.html",
    "href": "demo/SpecialFunctions.jl/docs/src/functions_overview.html",
    "title": "Functions",
    "section": "",
    "text": "Here the Special Functions are listed according to the structure of NIST Digital Library of Mathematical Functions (DLMF).\n\n\nGamma Function - DLMF\n\n\n\nFunction\nDescription\n\n\n\n\ngamma(z)\ngamma function \\Gamma(z)\n\n\nloggamma(x)\naccurate log(gamma(x)) for large x\n\n\nlogabsgamma(x)\naccurate log(abs(gamma(x))) for large x\n\n\nlogfactorial(x)\naccurate log(factorial(x)) for large x; same as loggamma(x+1) for x &gt; 1, zero otherwise\n\n\ndigamma(x)\ndigamma function (i.e. the derivative of loggamma at x)\n\n\ninvdigamma(x)\ninvdigamma function (i.e. inverse of digamma function at x using fixed-point iteration algorithm)\n\n\ntrigamma(x)\ntrigamma function (i.e the logarithmic second derivative of gamma at x)\n\n\npolygamma(m,x)\npolygamma function (i.e the (m+1)-th derivative of the loggamma function at x)\n\n\ngamma(a,z)\nupper incomplete gamma function \\Gamma(a,z)\n\n\nloggamma(a,z)\naccurate log(gamma(a,x)) for large arguments\n\n\ngamma_inc(a,x,IND)\nincomplete gamma function ratio P(a,x) and Q(a,x) (i.e evaluates P(a,x) and Q(a,x) for accuracy specified by IND and returns tuple (p,q))\n\n\ngamma_inc_inv(a,p,q)\ninverse of incomplete gamma function ratio P(a,x) and Q(a,x) (i.e evaluates x given P(a,x)=p and Q(a,x)=q)\n\n\nbeta(x,y)\nbeta function at x,y\n\n\nlogbeta(x,y)\naccurate log(beta(x,y)) for large x or y\n\n\nlogabsbeta(x,y)\naccurate log(abs(beta(x,y))) for large x or y\n\n\nlogabsbinomial(x,y)\naccurate log(abs(binomial(n,k))) for large n and k near n/2\n\n\nbeta_inc(a,b,x,y)\nincomplete beta function ratio I_x(a,b) and I_y(a,b) (i.e evaluates I_x(a,b) and I_y(a,b) and returns tuple (p,q))\n\n\nbeta_inc_inv(a,b,p,q)\nInverse of the incomplete beta function (i.e evaluates x given I_{x}(a, b) = p)\n\n\n\n\n\n\nExponential and Trigonometric Integrals - DLMF\n\n\n\nFunction\nDescription\n\n\n\n\nexpint(ν, z)\nexponential integral \\operatorname{E}_\\nu(z)\n\n\nexpinti(x)\nexponential integral \\operatorname{Ei}(x)\n\n\nexpintx(x)\nscaled exponential integral e^z \\operatorname{E}_\\nu(z)\n\n\nsinint(x)\nsine integral \\operatorname{Si}(x)\n\n\ncosint(x)\ncosine integral \\operatorname{Ci}(x)\n\n\n\n\n\n\nError Functions, Dawson’s and Fresnel Integrals - DLMF\n\n\n\nFunction\nDescription\n\n\n\n\nerf(x)\nerror function at x\n\n\nerf(x,y)\naccurate version of \\operatorname{erf}(y) - \\operatorname{erf}(x)\n\n\nerfc(x)\ncomplementary error function, i.e. the accurate version of 1-\\operatorname{erf}(x) for large x\n\n\nerfcinv(x)\ninverse function to erfc()\n\n\nerfcx(x)\nscaled complementary error function, i.e. accurate e^{x^2} \\operatorname{erfc}(x) for large x\n\n\nlogerfc(x)\nlog of the complementary error function, i.e. accurate \\operatorname{ln}(\\operatorname{erfc}(x)) for large x\n\n\nlogerfcx(x)\nlog of the scaled complementary error function, i.e. accurate \\operatorname{ln}(\\operatorname{erfcx}(x)) for large negative x\n\n\nerfi(x)\nimaginary error function defined as -i \\operatorname{erf}(ix)\n\n\nerfinv(x)\ninverse function to erf()\n\n\ndawson(x)\nscaled imaginary error function, a.k.a. Dawson function, i.e. accurate \\frac{\\sqrt{\\pi}}{2} e^{-x^2} \\operatorname{erfi}(x) for large x\n\n\nfaddeeva(x)\nFaddeeva function, equivalent to \\operatorname{erfcx}(-ix)\n\n\n\n\n\n\nAiry and Related Functions - DLMF\n\n\n\nFunction\nDescription\n\n\n\n\nairyai(z)\nAiry Ai function at z\n\n\nairyaiprime(z)\nderivative of the Airy Ai function at z\n\n\nairybi(z)\nAiry Bi function at z\n\n\nairybiprime(z)\nderivative of the Airy Bi function at z\n\n\nairyaix(z), airyaiprimex(z), airybix(z), airybiprimex(z)\nscaled Airy Ai function and derivative at z\n\n\n\n\n\n\nBessel Functions - DLMF\n\n\n\nFunction\nDescription\n\n\n\n\nbesselj(nu,z)\nBessel function of the first kind of order nu at z\n\n\nbesselj0(z)\nbesselj(0,z)\n\n\nbesselj1(z)\nbesselj(1,z)\n\n\nbesseljx(nu,z)\nscaled Bessel function of the first kind of order nu at z\n\n\nsphericalbesselj(nu,z)\nSpherical Bessel function of the first kind of order nu at z\n\n\nbessely(nu,z)\nBessel function of the second kind of order nu at z\n\n\nbessely0(z)\nbessely(0,z)\n\n\nbessely1(z)\nbessely(1,z)\n\n\nbesselyx(nu,z)\nscaled Bessel function of the second kind of order nu at z\n\n\nsphericalbessely(nu,z)\nSpherical Bessel function of the second kind of order nu at z\n\n\nbesselh(nu,k,z)\nBessel function of the third kind (a.k.a. Hankel function) of order nu at z; k must be either 1 or 2\n\n\nhankelh1(nu,z)\nbesselh(nu, 1, z)\n\n\nhankelh1x(nu,z)\nscaled besselh(nu, 1, z)\n\n\nhankelh2(nu,z)\nbesselh(nu, 2, z)\n\n\nhankelh2x(nu,z)\nscaled besselh(nu, 2, z)\n\n\nbesseli(nu,z)\nmodified Bessel function of the first kind of order nu at z\n\n\nbesselix(nu,z)\nscaled modified Bessel function of the first kind of order nu at z\n\n\nbesselk(nu,z)\nmodified Bessel function of the second kind of order nu at z\n\n\nbesselkx(nu,z)\nscaled modified Bessel function of the second kind of order nu at z\n\n\njinc(x)\nscaled Bessel function of the first kind divided by x. A.k.a. sombrero or besinc\n\n\n\n\n\n\nElliptic Integrals - DLMF\n\n\n\nFunction\nDescription\n\n\n\n\nellipk(m)\ncomplete elliptic integral of 1st kind K(m)\n\n\nellipe(m)\ncomplete elliptic integral of 2nd kind E(m)\n\n\n\n\n\n\nZeta and Related Functions - DLMF\n\n\n\nFunction\nDescription\n\n\n\n\neta(x)\nDirichlet eta function at x\n\n\nzeta(x)\nRiemann zeta function at x"
  },
  {
    "objectID": "demo/SpecialFunctions.jl/docs/src/functions_overview.html#gamma-function",
    "href": "demo/SpecialFunctions.jl/docs/src/functions_overview.html#gamma-function",
    "title": "Functions",
    "section": "",
    "text": "Gamma Function - DLMF\n\n\n\nFunction\nDescription\n\n\n\n\ngamma(z)\ngamma function \\Gamma(z)\n\n\nloggamma(x)\naccurate log(gamma(x)) for large x\n\n\nlogabsgamma(x)\naccurate log(abs(gamma(x))) for large x\n\n\nlogfactorial(x)\naccurate log(factorial(x)) for large x; same as loggamma(x+1) for x &gt; 1, zero otherwise\n\n\ndigamma(x)\ndigamma function (i.e. the derivative of loggamma at x)\n\n\ninvdigamma(x)\ninvdigamma function (i.e. inverse of digamma function at x using fixed-point iteration algorithm)\n\n\ntrigamma(x)\ntrigamma function (i.e the logarithmic second derivative of gamma at x)\n\n\npolygamma(m,x)\npolygamma function (i.e the (m+1)-th derivative of the loggamma function at x)\n\n\ngamma(a,z)\nupper incomplete gamma function \\Gamma(a,z)\n\n\nloggamma(a,z)\naccurate log(gamma(a,x)) for large arguments\n\n\ngamma_inc(a,x,IND)\nincomplete gamma function ratio P(a,x) and Q(a,x) (i.e evaluates P(a,x) and Q(a,x) for accuracy specified by IND and returns tuple (p,q))\n\n\ngamma_inc_inv(a,p,q)\ninverse of incomplete gamma function ratio P(a,x) and Q(a,x) (i.e evaluates x given P(a,x)=p and Q(a,x)=q)\n\n\nbeta(x,y)\nbeta function at x,y\n\n\nlogbeta(x,y)\naccurate log(beta(x,y)) for large x or y\n\n\nlogabsbeta(x,y)\naccurate log(abs(beta(x,y))) for large x or y\n\n\nlogabsbinomial(x,y)\naccurate log(abs(binomial(n,k))) for large n and k near n/2\n\n\nbeta_inc(a,b,x,y)\nincomplete beta function ratio I_x(a,b) and I_y(a,b) (i.e evaluates I_x(a,b) and I_y(a,b) and returns tuple (p,q))\n\n\nbeta_inc_inv(a,b,p,q)\nInverse of the incomplete beta function (i.e evaluates x given I_{x}(a, b) = p)"
  },
  {
    "objectID": "demo/SpecialFunctions.jl/docs/src/functions_overview.html#exponential-and-trigonometric-integrals",
    "href": "demo/SpecialFunctions.jl/docs/src/functions_overview.html#exponential-and-trigonometric-integrals",
    "title": "Functions",
    "section": "",
    "text": "Exponential and Trigonometric Integrals - DLMF\n\n\n\nFunction\nDescription\n\n\n\n\nexpint(ν, z)\nexponential integral \\operatorname{E}_\\nu(z)\n\n\nexpinti(x)\nexponential integral \\operatorname{Ei}(x)\n\n\nexpintx(x)\nscaled exponential integral e^z \\operatorname{E}_\\nu(z)\n\n\nsinint(x)\nsine integral \\operatorname{Si}(x)\n\n\ncosint(x)\ncosine integral \\operatorname{Ci}(x)"
  },
  {
    "objectID": "demo/SpecialFunctions.jl/docs/src/functions_overview.html#error-functions-dawsons-and-fresnel-integrals",
    "href": "demo/SpecialFunctions.jl/docs/src/functions_overview.html#error-functions-dawsons-and-fresnel-integrals",
    "title": "Functions",
    "section": "",
    "text": "Error Functions, Dawson’s and Fresnel Integrals - DLMF\n\n\n\nFunction\nDescription\n\n\n\n\nerf(x)\nerror function at x\n\n\nerf(x,y)\naccurate version of \\operatorname{erf}(y) - \\operatorname{erf}(x)\n\n\nerfc(x)\ncomplementary error function, i.e. the accurate version of 1-\\operatorname{erf}(x) for large x\n\n\nerfcinv(x)\ninverse function to erfc()\n\n\nerfcx(x)\nscaled complementary error function, i.e. accurate e^{x^2} \\operatorname{erfc}(x) for large x\n\n\nlogerfc(x)\nlog of the complementary error function, i.e. accurate \\operatorname{ln}(\\operatorname{erfc}(x)) for large x\n\n\nlogerfcx(x)\nlog of the scaled complementary error function, i.e. accurate \\operatorname{ln}(\\operatorname{erfcx}(x)) for large negative x\n\n\nerfi(x)\nimaginary error function defined as -i \\operatorname{erf}(ix)\n\n\nerfinv(x)\ninverse function to erf()\n\n\ndawson(x)\nscaled imaginary error function, a.k.a. Dawson function, i.e. accurate \\frac{\\sqrt{\\pi}}{2} e^{-x^2} \\operatorname{erfi}(x) for large x\n\n\nfaddeeva(x)\nFaddeeva function, equivalent to \\operatorname{erfcx}(-ix)"
  },
  {
    "objectID": "demo/SpecialFunctions.jl/docs/src/functions_overview.html#airy-and-related-functions",
    "href": "demo/SpecialFunctions.jl/docs/src/functions_overview.html#airy-and-related-functions",
    "title": "Functions",
    "section": "",
    "text": "Airy and Related Functions - DLMF\n\n\n\nFunction\nDescription\n\n\n\n\nairyai(z)\nAiry Ai function at z\n\n\nairyaiprime(z)\nderivative of the Airy Ai function at z\n\n\nairybi(z)\nAiry Bi function at z\n\n\nairybiprime(z)\nderivative of the Airy Bi function at z\n\n\nairyaix(z), airyaiprimex(z), airybix(z), airybiprimex(z)\nscaled Airy Ai function and derivative at z"
  },
  {
    "objectID": "demo/SpecialFunctions.jl/docs/src/functions_overview.html#bessel-functions",
    "href": "demo/SpecialFunctions.jl/docs/src/functions_overview.html#bessel-functions",
    "title": "Functions",
    "section": "",
    "text": "Bessel Functions - DLMF\n\n\n\nFunction\nDescription\n\n\n\n\nbesselj(nu,z)\nBessel function of the first kind of order nu at z\n\n\nbesselj0(z)\nbesselj(0,z)\n\n\nbesselj1(z)\nbesselj(1,z)\n\n\nbesseljx(nu,z)\nscaled Bessel function of the first kind of order nu at z\n\n\nsphericalbesselj(nu,z)\nSpherical Bessel function of the first kind of order nu at z\n\n\nbessely(nu,z)\nBessel function of the second kind of order nu at z\n\n\nbessely0(z)\nbessely(0,z)\n\n\nbessely1(z)\nbessely(1,z)\n\n\nbesselyx(nu,z)\nscaled Bessel function of the second kind of order nu at z\n\n\nsphericalbessely(nu,z)\nSpherical Bessel function of the second kind of order nu at z\n\n\nbesselh(nu,k,z)\nBessel function of the third kind (a.k.a. Hankel function) of order nu at z; k must be either 1 or 2\n\n\nhankelh1(nu,z)\nbesselh(nu, 1, z)\n\n\nhankelh1x(nu,z)\nscaled besselh(nu, 1, z)\n\n\nhankelh2(nu,z)\nbesselh(nu, 2, z)\n\n\nhankelh2x(nu,z)\nscaled besselh(nu, 2, z)\n\n\nbesseli(nu,z)\nmodified Bessel function of the first kind of order nu at z\n\n\nbesselix(nu,z)\nscaled modified Bessel function of the first kind of order nu at z\n\n\nbesselk(nu,z)\nmodified Bessel function of the second kind of order nu at z\n\n\nbesselkx(nu,z)\nscaled modified Bessel function of the second kind of order nu at z\n\n\njinc(x)\nscaled Bessel function of the first kind divided by x. A.k.a. sombrero or besinc"
  },
  {
    "objectID": "demo/SpecialFunctions.jl/docs/src/functions_overview.html#elliptic-integrals",
    "href": "demo/SpecialFunctions.jl/docs/src/functions_overview.html#elliptic-integrals",
    "title": "Functions",
    "section": "",
    "text": "Elliptic Integrals - DLMF\n\n\n\nFunction\nDescription\n\n\n\n\nellipk(m)\ncomplete elliptic integral of 1st kind K(m)\n\n\nellipe(m)\ncomplete elliptic integral of 2nd kind E(m)"
  },
  {
    "objectID": "demo/SpecialFunctions.jl/docs/src/functions_overview.html#zeta-and-related-functions",
    "href": "demo/SpecialFunctions.jl/docs/src/functions_overview.html#zeta-and-related-functions",
    "title": "Functions",
    "section": "",
    "text": "Zeta and Related Functions - DLMF\n\n\n\nFunction\nDescription\n\n\n\n\neta(x)\nDirichlet eta function at x\n\n\nzeta(x)\nRiemann zeta function at x"
  },
  {
    "objectID": "demo/SpecialFunctions.jl/docs/src/functions_list.html",
    "href": "demo/SpecialFunctions.jl/docs/src/functions_list.html",
    "title": "Functions",
    "section": "",
    "text": "CurrentModule = SpecialFunctions\n\n\ngamma\nloggamma\nlogabsgamma\nloggamma1p\nlogfactorial\ndigamma\ninvdigamma\ntrigamma\npolygamma\ngamma_inc\ngamma_inc_inv\nloggammadiv\ngammax\nrgammax\nrgamma1pm1\ngamma_inc_asym\ngamma_inc_cf\ngamma_inc_fsum\ngamma_inc_minimax\ngamma_inc_taylor\ngamma_inc_taylor_x\ngamma_inc_temme\ngamma_inc_temme_1\ngamma_inc_inv_psmall\ngamma_inc_inv_qsmall\ngamma_inc_inv_alarge\nauxgam\n\n\nbeta\nlogbeta\nlogabsbeta\nlogabsbinomial\nbeta_inc\nbeta_inc_inv\nncbeta\nncbeta_poisson\nncbeta_tail\nbeta_inc_power_series1\nbeta_inc_power_series2\nbeta_inc_asymptotic_asymmetric\nbeta_inc_asymptotic_symmetric\nbeta_inc_power_series\nbeta_inc_diff\nbeta_inc_cont_fraction\nbeta_integrand\n\n\n\nchepolsum\nlambdaeta\nstirling_corr\nstirling_error\nesum\ncoeff1\ncoeff2\ncoeff3\nncF\n\n\n\n\nexpint\nexpinti\nexpintx\nsinint\ncosint\n\n\n\nerf\nerf(::Real, ::Real)\nerfc\nlogerf\nerfcinv\nerfcx\nlogerfc\nlogerfcx\nerfi\nerfinv\ndawson\nfaddeeva\n\n\n\nairyai\nairyaiprime\nairybi\nairybiprime\nairyaix\nairyaiprimex\nairybix\nairybiprimex\n\n\n\nbesselj\nbesselj0\nbesselj1\nbesseljx\nsphericalbesselj\nbessely\nbessely0\nbessely1\nbesselyx\nsphericalbessely\nbesselh\nbesselhx\nhankelh1\nhankelh1x\nhankelh2\nhankelh2x\nbesseli\nbesselix\nbesselk\nbesselkx\njinc\n\n\n\nellipk\nellipe\n\n\n\neta\nzeta"
  },
  {
    "objectID": "demo/SpecialFunctions.jl/docs/src/functions_list.html#gamma-function",
    "href": "demo/SpecialFunctions.jl/docs/src/functions_list.html#gamma-function",
    "title": "Functions",
    "section": "",
    "text": "gamma\nloggamma\nlogabsgamma\nloggamma1p\nlogfactorial\ndigamma\ninvdigamma\ntrigamma\npolygamma\ngamma_inc\ngamma_inc_inv\nloggammadiv\ngammax\nrgammax\nrgamma1pm1\ngamma_inc_asym\ngamma_inc_cf\ngamma_inc_fsum\ngamma_inc_minimax\ngamma_inc_taylor\ngamma_inc_taylor_x\ngamma_inc_temme\ngamma_inc_temme_1\ngamma_inc_inv_psmall\ngamma_inc_inv_qsmall\ngamma_inc_inv_alarge\nauxgam\n\n\nbeta\nlogbeta\nlogabsbeta\nlogabsbinomial\nbeta_inc\nbeta_inc_inv\nncbeta\nncbeta_poisson\nncbeta_tail\nbeta_inc_power_series1\nbeta_inc_power_series2\nbeta_inc_asymptotic_asymmetric\nbeta_inc_asymptotic_symmetric\nbeta_inc_power_series\nbeta_inc_diff\nbeta_inc_cont_fraction\nbeta_integrand\n\n\n\nchepolsum\nlambdaeta\nstirling_corr\nstirling_error\nesum\ncoeff1\ncoeff2\ncoeff3\nncF"
  },
  {
    "objectID": "demo/SpecialFunctions.jl/docs/src/functions_list.html#exponential-and-trigonometric-integrals",
    "href": "demo/SpecialFunctions.jl/docs/src/functions_list.html#exponential-and-trigonometric-integrals",
    "title": "Functions",
    "section": "",
    "text": "expint\nexpinti\nexpintx\nsinint\ncosint"
  },
  {
    "objectID": "demo/SpecialFunctions.jl/docs/src/functions_list.html#error-functions-dawsons-and-fresnel-integrals",
    "href": "demo/SpecialFunctions.jl/docs/src/functions_list.html#error-functions-dawsons-and-fresnel-integrals",
    "title": "Functions",
    "section": "",
    "text": "erf\nerf(::Real, ::Real)\nerfc\nlogerf\nerfcinv\nerfcx\nlogerfc\nlogerfcx\nerfi\nerfinv\ndawson\nfaddeeva"
  },
  {
    "objectID": "demo/SpecialFunctions.jl/docs/src/functions_list.html#airy-and-related-functions",
    "href": "demo/SpecialFunctions.jl/docs/src/functions_list.html#airy-and-related-functions",
    "title": "Functions",
    "section": "",
    "text": "airyai\nairyaiprime\nairybi\nairybiprime\nairyaix\nairyaiprimex\nairybix\nairybiprimex"
  },
  {
    "objectID": "demo/SpecialFunctions.jl/docs/src/functions_list.html#bessel-functions",
    "href": "demo/SpecialFunctions.jl/docs/src/functions_list.html#bessel-functions",
    "title": "Functions",
    "section": "",
    "text": "besselj\nbesselj0\nbesselj1\nbesseljx\nsphericalbesselj\nbessely\nbessely0\nbessely1\nbesselyx\nsphericalbessely\nbesselh\nbesselhx\nhankelh1\nhankelh1x\nhankelh2\nhankelh2x\nbesseli\nbesselix\nbesselk\nbesselkx\njinc"
  },
  {
    "objectID": "demo/SpecialFunctions.jl/docs/src/functions_list.html#elliptic-integrals",
    "href": "demo/SpecialFunctions.jl/docs/src/functions_list.html#elliptic-integrals",
    "title": "Functions",
    "section": "",
    "text": "ellipk\nellipe"
  },
  {
    "objectID": "demo/SpecialFunctions.jl/docs/src/functions_list.html#zeta-and-related-functions",
    "href": "demo/SpecialFunctions.jl/docs/src/functions_list.html#zeta-and-related-functions",
    "title": "Functions",
    "section": "",
    "text": "eta\nzeta"
  },
  {
    "objectID": "slide/slide.html#overview",
    "href": "slide/slide.html#overview",
    "title": "Let’s read Julia documentation in your preferred language",
    "section": "Overview",
    "text": "Overview\n\nBackground and Challenges\nIntroduction to DocstringTranslation.jl\nMultilingual translation of Julia documentation\nRunning demonstration (if possible)"
  },
  {
    "objectID": "slide/slide.html#background-and-challenges",
    "href": "slide/slide.html#background-and-challenges",
    "title": "Let’s read Julia documentation in your preferred language",
    "section": "Background and Challenges",
    "text": "Background and Challenges\n\nJulia allows us to write code with high-level operations without losing execution performance (solving two-language problem)\nI want more people to use Julia"
  },
  {
    "objectID": "slide/slide.html#background-and-challenges-1",
    "href": "slide/slide.html#background-and-challenges-1",
    "title": "Let’s read Julia documentation in your preferred language",
    "section": "Background and Challenges",
    "text": "Background and Challenges\nWhen you want to learn something about Julia, we need to do before reading Julia’s official documentation.\njulia&gt; using Pkg; Pkg.activate(\"YourBrain\"); Pkg.add(\"English\")\nThis requirements may be non-trivial for someone like me.\nif you in Set(NativeEnglishSpeakers)\n    println(\"No problem :D.\")\nelseif you ∈ Set(GoodAtReadingEnglish)\n    println(\"It's Okay.\")\nelse\n    # This block happens if `you` is `me`\n    lang = native_language(you) # e.g., Japanese\n    @assert lang ≠ \"English\"\n    println(\"Meh.\")\n    println(\"It takes a lot of time to understand correctly.\")\n    println(\"I want to read documentation in $(lang).\")\nend"
  },
  {
    "objectID": "slide/slide.html#challenges-in-japan",
    "href": "slide/slide.html#challenges-in-japan",
    "title": "Let’s read Julia documentation in your preferred language",
    "section": "Challenges (in Japan)",
    "text": "Challenges (in Japan)\n\nFor Japanese, learning English is not easy than English native speakers expected.\n\nSee this discussion\n\nThe number of Japanese who use English daily is limited\n\nWe usually read, write, listen and discuss something in Japanese\n\nThrefore many technical documents are expected to be readable in Japanese\n\nThis is a key factor for making Japanese try and use something(=Julia)"
  },
  {
    "objectID": "slide/slide.html#challenges-in-japan-1",
    "href": "slide/slide.html#challenges-in-japan-1",
    "title": "Let’s read Julia documentation in your preferred language",
    "section": "Challenges (in Japan)",
    "text": "Challenges (in Japan)\n\nIn Japan especially in industry, C++/Python is widely used.\n\nThere is lots of resources in for C++/Python on the internet.\n\nWhen I introduce Julia to others, they said to me:\n\n“Few libraries and documentation available for Julia” Python user says\n“I don’t want to use Julia because it is a minor language” C++ user says\n“Julia is difficult” C++ user says\n“Because Julia is not effective, production systems must strictly prohibit the use of the Julia language. From now on, if you use it, be prepared for possible termination.” CEO at my workplace (This is NOT a joke.)"
  },
  {
    "objectID": "slide/slide.html#challenges-in-japan-2",
    "href": "slide/slide.html#challenges-in-japan-2",
    "title": "Let’s read Julia documentation in your preferred language",
    "section": "Challenges (in Japan)",
    "text": "Challenges (in Japan)\n\nStarting August 2025, I’ll be unemployed. This Is Not a Drill.\nTo grow the Julia community in Japan, I think we need documentation written in Japanese. That’s why I created DocstringTranslation.jl package."
  },
  {
    "objectID": "slide/slide.html#solution",
    "href": "slide/slide.html#solution",
    "title": "Let’s read Julia documentation in your preferred language",
    "section": "Solution",
    "text": "Solution\n\nManual translation for Julia documents requires significant time\n\nMy life is too short\n\nDeveloping an automated translation system utilizing machine translation\n\nDocstringTranslation.jl 😎"
  },
  {
    "objectID": "slide/slide.html#what-is-docstringtranslation.jl",
    "href": "slide/slide.html#what-is-docstringtranslation.jl",
    "title": "Let’s read Julia documentation in your preferred language",
    "section": "What is DocstringTranslation.jl?",
    "text": "What is DocstringTranslation.jl?\nA package for translating Julia docstrings using OpenAI API\njulia&gt; @doc exp\n  exp(x)\n\n  Compute the natural base exponential of x, in other words ℯ^x.\n\n  See also exp2, exp10, and cis.\n\n  Examples\n  ≡≡≡≡≡≡≡≡\n\n  julia&gt; exp(1.0)\n  2.718281828459045\n\n  julia&gt; exp(im * pi) ≈ cis(pi)\n  true\n\n  exp(A::AbstractMatrix)\n\n  Compute the matrix exponential of A, defined as:\n\n  e^A = \\sum_{n=0}^{\\infty} \\frac{A^n}{n!}.\n\n  For symmetric or Hermitian matrices A, an eigendecomposition (eigen) is used; otherwise, the scaling and squaring algorithm\n  (see [^H05]) is employed.\n\n  │ [^H05]\n  │\n  │  Nicholas J. Higham, \"The squaring and scaling method for the matrix exponential revisited\", SIAM Journal\n  │  on Matrix Analysis and Applications, 26(4), 2005, 1179-1193. doi:10.1137/090768539\n  │  (https://doi.org/10.1137/090768539)\n\n  Examples\n  ≡≡≡≡≡≡≡≡\n\n  julia&gt; A = Matrix(1.0I, 2, 2)\n  2×2 Matrix{Float64}:\n   1.0  0.0\n   0.0  1.0\n\n  julia&gt; exp(A)\n  2×2 Matrix{Float64}:\n   2.71828  0.0\n   0.0      2.71828"
  },
  {
    "objectID": "slide/slide.html#what-is-docstringtranslation.jl-1",
    "href": "slide/slide.html#what-is-docstringtranslation.jl-1",
    "title": "Let’s read Julia documentation in your preferred language",
    "section": "What is DocstringTranslation.jl?",
    "text": "What is DocstringTranslation.jl?\nA package for translating Julia docstrings using OpenAI API\njulia&gt; ENV[\"OPENAI_API_KEY\"] = \"sk-&lt;blah&gt;\"\njulia&gt; using DocstringTranslation\njulia&gt; @switchlang! :ja\njulia&gt; @doc exp\n  exp(x)\n\n  xの自然基底指数を計算します。言い換えれば、ℯ^xです。\n\n  他にexp2、exp10、およびcisも参照してください。\n\n  例\n  ≡≡\n\n  julia&gt; exp(1.0)\n  2.718281828459045\n\n  julia&gt; exp(im * pi) ≈ cis(pi)\n  true\n\n  exp(A::AbstractMatrix)\n\n  行列 A の行列指数関数を計算します。定義は次の通りです。\n\n  e^A = \\sum_{n=0}^{\\infty} \\frac{A^n}{n!}.\n\n  対称行列またはエルミート行列 A\n  の場合は、固有分解（eigen）が使用され、それ以外の場合はスケーリングと平方化アルゴリズム（[^\\H05]を参照）が選択されます。\n\n  │ [^H05]\n  │\n  │  Nicholas J. Higham, \"The squaring and scaling\n  │  method for the matrix exponential revisited\",\n  │  SIAM Journal on Matrix Analysis and\n  │  Applications, 26(4), 2005, 1179-1193.\n  │  doi:10.1137/090768539\n  │  (https://doi.org/10.1137/090768539)\n\n  例\n  ≡≡\n\n  julia&gt; A = Matrix(1.0I, 2, 2)\n  2×2 Matrix{Float64}:\n   1.0  0.0\n   0.0  1.0\n\n  julia&gt; exp(A)\n  2×2 Matrix{Float64}:\n   2.71828  0.0\n   0.0      2.71828"
  },
  {
    "objectID": "slide/slide.html#what-is-docstringtranslation.jl-2",
    "href": "slide/slide.html#what-is-docstringtranslation.jl-2",
    "title": "Let’s read Julia documentation in your preferred language",
    "section": "What is DocstringTranslation.jl?",
    "text": "What is DocstringTranslation.jl?\nA package for translating Julia docstrings using OpenAI API\n\n\n@doc exp (Original)\njulia&gt; @doc exp\n  exp(x)\n\n  Compute the natural base exponential of x, in other words ℯ^x.\n\n  See also exp2, exp10, and cis.\n\n  Examples\n  ≡≡≡≡≡≡≡≡\n\n  julia&gt; exp(1.0)\n  2.718281828459045\n\n  julia&gt; exp(im * pi) ≈ cis(pi)\n  true\n\n  exp(A::AbstractMatrix)\n\n  Compute the matrix exponential of A, defined as:\n\n  e^A = \\sum_{n=0}^{\\infty} \\frac{A^n}{n!}.\n\n  For symmetric or Hermitian matrices A, an eigendecomposition (eigen) is used; otherwise, the scaling and squaring algorithm\n  (see [^H05]) is employed.\n\n  │ [^H05]\n  │\n  │  Nicholas J. Higham, \"The squaring and scaling method for the matrix exponential revisited\", SIAM Journal\n  │  on Matrix Analysis and Applications, 26(4), 2005, 1179-1193. doi:10.1137/090768539\n  │  (https://doi.org/10.1137/090768539)\n\n  Examples\n  ≡≡≡≡≡≡≡≡\n\n  julia&gt; A = Matrix(1.0I, 2, 2)\n  2×2 Matrix{Float64}:\n   1.0  0.0\n   0.0  1.0\n\n  julia&gt; exp(A)\n  2×2 Matrix{Float64}:\n   2.71828  0.0\n   0.0      2.71828\n\n@doc exp (Translated into Japanese)\njulia&gt; ENV[\"OPENAI_API_KEY\"] = \"sk-&lt;blah&gt;\"\njulia&gt; using DocstringTranslation\njulia&gt; @switchlang! :ja\njulia&gt; @doc exp\n  exp(x)\n\n  xの自然基底指数を計算します。言い換えれば、ℯ^xです。\n\n  他にexp2、exp10、およびcisも参照してください。\n\n  例\n  ≡≡\n\n  julia&gt; exp(1.0)\n  2.718281828459045\n\n  julia&gt; exp(im * pi) ≈ cis(pi)\n  true\n\n  exp(A::AbstractMatrix)\n\n  行列 A の行列指数関数を計算します。定義は次の通りです。\n\n  e^A = \\sum_{n=0}^{\\infty} \\frac{A^n}{n!}.\n\n  対称行列またはエルミート行列 A\n  の場合は、固有分解（eigen）が使用され、それ以外の場合はスケーリングと平方化アルゴリズム（[^\\H05]を参照）が選択されます。\n\n  │ [^H05]\n  │\n  │  Nicholas J. Higham, \"The squaring and scaling\n  │  method for the matrix exponential revisited\",\n  │  SIAM Journal on Matrix Analysis and\n  │  Applications, 26(4), 2005, 1179-1193.\n  │  doi:10.1137/090768539\n  │  (https://doi.org/10.1137/090768539)\n\n  例\n  ≡≡\n\n  julia&gt; A = Matrix(1.0I, 2, 2)\n  2×2 Matrix{Float64}:\n   1.0  0.0\n   0.0  1.0\n\n  julia&gt; exp(A)\n  2×2 Matrix{Float64}:\n   2.71828  0.0\n   0.0      2.71828"
  },
  {
    "objectID": "slide/slide.html#what-is-docstringtranslation.jl-3",
    "href": "slide/slide.html#what-is-docstringtranslation.jl-3",
    "title": "Let’s read Julia documentation in your preferred language",
    "section": "What is DocstringTranslation.jl?",
    "text": "What is DocstringTranslation.jl?"
  },
  {
    "objectID": "slide/slide.html#how-translation-works",
    "href": "slide/slide.html#how-translation-works",
    "title": "Let’s read Julia documentation in your preferred language",
    "section": "How Translation Works",
    "text": "How Translation Works\n\n@switchlang! :ja overrides the Docs.parsedoc(d::DocStr) method.\n\n# Rough implementation outline\n@eval function Docs.parsedoc(d::DocStr)\n    if d.object === nothing\n        md = Docs.formatdoc(d)\n        md.meta[:module] = d.data[:module]\n        md.meta[:path] = d.data[:path]\n        begin # hack\n          # inject a translation engine such as OpenAI.jl\n          translated_md = translate_docstring_with_openai(md)\n        end # hack\n        d.object = translated_md\n    end\n    d.object\nend\nFor more details, refer to the actual implementation."
  },
  {
    "objectID": "slide/slide.html#docstrings-on-ijulia.jl",
    "href": "slide/slide.html#docstrings-on-ijulia.jl",
    "title": "Let’s read Julia documentation in your preferred language",
    "section": "Docstrings on IJulia.jl",
    "text": "Docstrings on IJulia.jl\nWe can view translated docstrings on Jupyter Notebook"
  },
  {
    "objectID": "slide/slide.html#live-docs-on-pluto.jl",
    "href": "slide/slide.html#live-docs-on-pluto.jl",
    "title": "Let’s read Julia documentation in your preferred language",
    "section": "Live Docs on Pluto.jl",
    "text": "Live Docs on Pluto.jl\nWe can view translated docstrings on Pluto Notebook"
  },
  {
    "objectID": "slide/slide.html#applications",
    "href": "slide/slide.html#applications",
    "title": "Let’s read Julia documentation in your preferred language",
    "section": "Applications",
    "text": "Applications\n\nWe’ve shown we can translate docstrings into any languages.\nWhat about files in docs?\n\nCan we translate documentation built with Documenter.jl?"
  },
  {
    "objectID": "slide/slide.html#translation-results-for-julias-official-documentation",
    "href": "slide/slide.html#translation-results-for-julias-official-documentation",
    "title": "Let’s read Julia documentation in your preferred language",
    "section": "Translation Results for Julia’s Official Documentation",
    "text": "Translation Results for Julia’s Official Documentation\nMultilingual Julia Documentation:\n\nJapanese\nKorean\nChinese\nGerman\nFrench\nSpanish\nArabic\nRussian"
  },
  {
    "objectID": "slide/slide.html#additional-information",
    "href": "slide/slide.html#additional-information",
    "title": "Let’s read Julia documentation in your preferred language",
    "section": "Additional Information",
    "text": "Additional Information\nWe are experimenting with various backends. In terms of accuracy and speed, I think the OpenAI backend is the best.\n\nDocstringTranslation.jl (OpenAI backend)\nDocstringTranslationOllamaBackend.jl (Ollama backend)\nDocstringTranslationPLaMoBackend.jl (PLaMo backend)\nDocstringTranslationExoBackend.jl (exo backend)\nDocstringTranslationGoogleTransBackend.jl (Google Translate API)"
  },
  {
    "objectID": "slide/slide.html#summary",
    "href": "slide/slide.html#summary",
    "title": "Let’s read Julia documentation in your preferred language",
    "section": "Summary",
    "text": "Summary\n\nIntroduce DocstringTranslation.jl\nEnables multilingual support for Julia documentation\nSupports both docstrings and Documenter.jl\nSolves yet another two-language problem (I believe)\n\nFuture Plans:\n\nTranslate Julia documentation for more languages\nSupport Franklin.jl based documentation"
  },
  {
    "objectID": "slide/slide.html#thank-you",
    "href": "slide/slide.html#thank-you",
    "title": "Let’s read Julia documentation in your preferred language",
    "section": "Thank You",
    "text": "Thank You\nRepositories:\n\nDocstringTranslation.jl"
  },
  {
    "objectID": "slide/slide.html#about-result-caching",
    "href": "slide/slide.html#about-result-caching",
    "title": "Let’s read Julia documentation in your preferred language",
    "section": "About Result Caching",
    "text": "About Result Caching\n\nUses Scratch.jl to store translation results locally\nPrevents repeated API calls each time the REPL starts\nAllows modification of translation results by editing &lt;lang&gt;.md files (e.g., ja.md)\nEnables sharing of translation results among users\n\n$ tree ~/.julia/scratchspaces/d404e13b-1f8e-41a5-a26a-0b758a0c6c97/translation\n├── Base\n│   └── 1.11\n│       └── Math\n│           └── 77be4ada26c623c913ebbdae5d8450a4dfe8f3cbf67837faac9d7193342d2bfe\n│               ├── ja.md\n│               └── original.md\n└── LinearAlgebra\n    └── 1.11\n        └── 46c0494a8a2adffc6f71752b60448da1743997b5b1791b71e3830113e9b9cc46\n            ├── ja.md\n            └── original.md\n\n8 directories, 4 files"
  }
]